PHP   (persional home page)         超文本预处理语言
    官网 www.php.net    广泛使用的开源的脚本语言
运行环境:
    wamp:windows+apache+mysql+PHP
    lamp:linux+apache+mysql+php
    xampp

运行环境搭建:
    linux安装:
        1、-源码包安装
        2、-rpm包安装
        3、-集成软件安装(xampp WampServer phpStudy UPUPW)    //缺点：不能独立选择自己想用的软件的版本、不能选择自己需要的软件、不能修改运行环境的安装目录
    windows
        1、单个下载安装
        2、集成环境安装

    appserv:AppServ 是 PHP 网页架站工具组合包， 所包含的软件有：Apache、Apache Monitor、PHP、MySQL、phpMyAdmin等可以让你迅速搭建完整的底层环境。
    
    eclipse   开发：
        下载安装开发组件，PDT、重启、去菜单 Windows > Preferences 选择 general > editors > file associations
　　单击“添加”按钮，加入 *.php。


PHP文件构成:HTML+PHP+JS+CSS+ajax
    1.PHP定界符(可以写在页面的任意位置)
        1.标准定界符   XML风格*******    
            <?php  
                PHP代码
            ?>
        2.短标记
            <?
                PHP代码
            ?>
        3.asp风格
            <%
                PHP代码
            %>
        4script
            <script language="php">
                PHP代码
            </script>
        注意phpt 严格区分大小写且以分号结尾
    2.PHP注释(写在PHP的定界符之内)
        1.单行注释://注释内容    (C++风格)
                   #注释内容    （Shell风格）
        2./*
            PHP多行注释符
            */
    3.PHP中的变量
        变量:值存储在内存中有名称的信息，变量可以随着程序的执行而改变（标准解释）
        变量命名格式:  $变量名 = 值
        变量名:
            1.以$开头
            2.$之后的第一位可以是字母以及下划线
            3.$之后第二位开始相同与其他语法，****驼峰命名法****
        PHP中的变量常量
            标量类型（一个变量存放一个类型）
                bollean、integer、float(double)、string
            复合类型
                array、object
            特殊类型
                resource（资源）、NULL
            伪类型
                mixed（混合类型）、number（数字类型）、callback（回掉类型）
            伪变量 $...
            常量
                定义:defined('常量名','值')
    4.PHP中的类型
        查看变量类型
            var_dump()          //查看变量得到值和类型
            is_type()           //查看某个类型，用于判断，返回boolean
            gettype()           //获取变量的类型
        类型转换
            强制类型转换
                原来的值的类型并没有发生变化，只是引用了新的类型的值
                (string)age      返回string类型
            永久类型转换
                将变量的类型永久性更改
                settype(var,type);
                settype(age,integer);
        boolean类型
            可以转换为boolean为false 的值（除此之外的都转换为true）:
                数字 0 、字符串 0 、空字符串、空数组、null
        integer 类型
            8进制以0开头，16进制以0x开头
            PHP_INT_MAX查看本机支持的最大整数，当数据查过这个值之后自动转换为float类型
            intval()方法转换为整数，只是取整数部分，字符串类型的只能是以数字开头的才能正确转换为int型，其他转换为0
            round()方法四舍五入
        float类型
            floatval()转换为浮点数；
            整数转换为浮点数后不改变值(后面也不加.00)，只改变类型
            浮点类型之间的比较，最好设置精度，比较他们的差值是否大于精度，也可以直接比较
        String类型
            单引号定义的string类型:
                不能解析变变量，变量将会作为字符串的一部分处理
                特殊字符需要用到转义字符"\",在需要用到"\"的时候需要使用反斜杠转义反斜杠
            双引号定义的string类型:
                可以解析变量，在字符串中直接输出
                特殊字符可以直接在字符串中直接输出而不需要使用转义字符
        heredoc语法结构:
                用于输出大段文本，具体语法为:
                
                $heredoc=<<<DOF
                    文本内容
                    。。。
                DOF;
                
                注意:heredoc仅作为变量名可以替换，DOF为开始结束标签，可以替换，开始标签后面直接换行不能有其他内容，结束标签
                前面不能有其他内容，包括空格(直接顶格写)，中间的部分支持HTML代码、CSS代码、JS代码,可以理解为升级版双引号
        nowdoc语法结构:

                $nowdoc=<<<'DOF'
                    文本内容
                    。。。
                DOF;

                注意:语法结构与heredoc语法结构基本相似，但是开始标记需要使用单引号括起来
    5.数组
        数组的基本语法:
            $array=array(
                key1=>value1,
                key2=>value2,
                key3=>value3,
                key4=>value4,
            )
        注意:键值对格式，圆括号也可以用方括号代替，数组的值可以是任意类型
          数组的分类：
            整数——>索引数组
            字符串——>关联数组
            如果不是这两种类型会强制类型转换为这两种
        
            eg:
                $array=['id'=>101,'name'=>'hc','age'=>28];
                访问数据:
                    var_dump($array{'name'})    //使用花括号访问   在双引号中访问无法解析
                    var_dump($array['name'])     //使用方括号访问
                //可以使用print_r()方法打印数组

        数组的追加以及跟新:
            $array=['htlm','css','js'];

            $array[]='ph';      //不指定键名则追加
            $array[2]='java';   //键名纯在则跟新
            $array[6]='java';   //键名不存在则创建新元素

        数组元素的删除
            $array=['id'=>101,'name'=>'hc','age'=>28];
            print_r($array);
            unset($array['age]);  //删除数组的元素
            unset($array);        //删除整个数组，
            //使用遍历将数组里面的元素逐个销毁，但是数组依然纯在
            //使用unset($array)后数组不存在
        数组元素重建索引:
            $arr=[0=>10,1=>20,2=>2,3=>44,4=>23];
            print_r($arr);     //查看原始数组
            unset($arr[1]);    //删除第二个元素
            print_r($arr);     //查看删除后的数组内容
            $nweArr=array_values($arr);    //重建数组索引
            print_r($nweArr);    //查看重建后的数组    
        遍历数组:
            $arr=[1,2,3,4,5];
            foreach($arr as $key => $value){
                echo $key.'=>'.$value.'<br>;
            }
            //将数组元素中的元素复制到键值对中进行操作

        PHP中常用的输出语句
        ***********************************************************************************************
            语句/函数       标量类型(字面量/变量/常量)      复合类型(数组/对象)
            echo            值                           数组:array  对象:无法查看(toString除外)
            print_r         值                           格式化输出，加参数true，输出到字符串
            var_dump        类型、值                      类型  长度  值

            注意:
                print_r的第二个参数为true则输出为字符串
                print_r和var_dump()函数，参数为对象的时候则指数出对象的属性
                echo和var_dump()可以同时输出多个数据，print_r仅接受但数据
                print与echo除了可以返回1之外没有任何区别


    6.对象
        创建对象
            通过对象创建对象，类似java
            eg       
                class student{
                    public $name="";
                    public $age="";
                    public $sex="";
                    public function fn(){
                        /**
                            方法体
                        */
                    }
                }

        访问对象的属性
            $obj=new student;
            $obj->name;
            $obj->age;
            $obj->sex;
            $obj->fn();   //访问对象的方法

        $obj=new stdClass();      //php内置对象    可以直接创建  
        //可以通过给他添加属性设定自己的对象
        $obj->name="";
        $obj->fn=function(){};      //可以对象属性里面添加方法
        调用该方法必须使用call_user_func()函数    call_user_func($obj->fn);  fn不带括号
        可以在其他类型转换为对象：
            数组：直接在数组前面添加强制转换，转换后的对象属性为数组的索引
            数字、字符串:直接在字符串的前面添加强制转换，转后后的对象默认自动添加"scalar"属性，作为对象的属性
            null转换为对象后为空对象，没有任何属性
    7.变量与常量
        变量的创建的与命名规则
            .以$开头，后面紧跟的是字母下划线
            .后面是字母数字下划线，不能有特殊字符
            .区分大小写
            .驼峰命名法
            .下划线命名法
        变量的默认值
            布尔类型   false
            数值类型   0
            字符类型   "" 空字符串
            数组类型   []空数组
            默认类型   null
        变量的赋值操作
            变量的赋值分为值传递（默认），引用传递
            直接赋值的方式为值传递
            引用传递需要在引用的变量前面添加"&"
            eg:
                $var1= &$var2;    //采用引用方式赋值，相当于给$var1起了一个别名
        PHP中的可变变量 
            变量的名称来至于另外一个变量的值

            eg:
                $var1="myName";    //定义一个普通变量
                $$var1="这是一个可变变量";      //使用$var1的值来作为新的变量的变量名


                访问可变变量方式:
                    一:直接使用可变变量的命的     $$var
                    二:使用可变变量所引用的值来访问      $myName
                **********作为可变变量的名字引用的变量的值必须符合命名规则**********
        变量的作用域
            变量类型        创建                              作用域
            -----------------------------------------------------------------------
            局部变量        当前脚本的函数内创建              仅函数体内部
            全局变量        当前脚本的函数外定义              当前脚本
            超全局变量      系统预定义，无创建，跨脚本使用     跨脚本任何地方都可以使用
            静态变量        函数内部使用static关键字创建      可以供每次调用的时候共享
            ----------------------------------------------------------------------
            全局变量不能在函数内部直接创建，必须提前申明
            特殊全局变量 $GLOBALS;     //数组，保存当前脚本中的所有的全局变量
            静态变量
                function sum(){
                    static $sum=10;
                    return $sum+=10;
                }
                //只会在第一次调用这个函数的时候申明这个变量，后面调用的时候不会在次申明，同时值也不会在函数执行完就丢失掉
        预定义变量
            $GLOBALS全局变量
                eg:$siteName;
                    echo $siteName;
                    echo $GLOBALS['siteName'];          //可以在函数中使用这种方法访问全局变量
            $SERVER
                用来存放服务器和当前执行环境的信息
            $GET
                用于获取URL地址栏中的变量信息
                特殊符号 空格用+代替
            $POST
                用处接受使用POST方式传递的数据
                $POST数组中的属性名为传送的表单中的文本框的name相同
            $COOKIE
                写在客服端的变量就是COOKIE
                为什么使用cookie？
                    标识用户身份
                谁来创建COOKIE
                    由服务器创建修改删除COOKIE
                创建Cookie
                    setcookie()函数有5个参数
                        1，名称   2，值    3，过期时间    4，生效的应用范围    5，域名
                    setcookie('siteName','name',time()+3600);       //创建一个名为sitename值为name的cookie,有效时间为1小时  不设置时间关闭浏览器就消失
                读取cookie
                     $COOKIE['siteName'];
            $session
                创建会话
                session_start();    //打开一个会话，在客户端创建一个 session_id
                读取session
                    session_id();       //读取session中的值
                删除session
                    1.unset();    //调用unset逐个删除
                    2.session_destory();     //调用session删除函数全部删除
    8.流程控制
        if判断语句
            if(condition){
                
            }elseif(condition){  //elseif

            }else{

            }
        多分支选择结构
            switch(表达式){
                case 值1:
                    语句1;
                    break;
                case 值2:
                    语句2;
                    break;
                case 值3:
                    语句3;
                    break;
                default:
                    语句;
            }
            匹配到某一个case就开始执行，知道遇到break语句或者执行完代码
            default分支不是必须的
        for循环
             for(循环初始变量;条件表达式;循环变量的增量){
                 //循环体
             }
        while循环
            while(condition){
                //循环体
            }
            //循环的初始条件放在循环的外面
            //当条件表达式为真的时候才会执行
        doWhile循环
            do{
                //循环体
            }while(condition)
            //先执行循环体再判断，至少执行一次
            //初始条件可以放在循环体内部
    9.运算符
        算术运算符：加减乘除取模         除法除不尽的时候自动转换为浮点数
        字符串运算符"." 用于连接字符串     中间可以加入变量
        赋值运算符   
        比较运算符(关系运算符)  返回值为布尔类型  
            >    <大于小于
            ==(比较值)   
            ===(比较值与类型)     
            <>（判断值是否不相等）   
            !== 判断是否不等(比较值与类型)
        逻辑运算符
            &&   逻辑与
            ||   逻辑或
            !    逻辑非
    10.函数
        函数定义
            函数必须有一个有意义的名字
            function 函数名(参数列表){
                //函数体
            }
            函数调用:       函数名(参数);
        函数的参数
            值参数         在函数的参数列表里面定义一个形参
            引用参数       在函数的参数列表里面定义一个引用参数(参数前面添加 & )
            默认参数       当实参少于形参的时候以形参的默认值作为变量
                默认参数举例:
                    function demo(arg1=1,arg2=2,arg3=3){
                        //在调用该函数的时候有些参数没有则使用默认值
                    }
            可变参数       函数可以接受任意数量的参数数量，在函数体内使用func_get_args() 函数将接受的参数转换为数组，在参数列表里面不需要使用形参      func_get_arg()   可以获得指定的参数
        可变函数、回掉函数
            函数名称来至于另外一个变量
            使用函数call_user_func_array(可变函数名称,参数列表);     //回掉函数
        用回掉方法调用对象或者类的方法
            call_user_func_arrary();
            第一个参数 类名 函数名
            第二个参数 函数的参数
            //参数以数组形式    
            eg:
                call_user_func_arrary(['class','fn'],['arg1','arg2']);
        文件包含
            引用外部文件到当前文件中
            require '文件名';      //引入文件失败的时候   程序会停止
            require_once  '文件名';    //文件只会引入一次
            include '文件名';      //引入文件失败的时候只会提示错误，但是程序不会停止运行
            include_once '文件名';     //文件只会引入一次
        匿名函数、闭包
            匿名函数：没有名称或者名称可以动态设置的函数
            eg:
                $show =function (){
                    //函数体
                };     //最后必须加分号
                调用:  $show();
            闭包:在函数内部引入了匿名函数，在匿名函数中不能直接使用外部变量，在需要使用的时候在匿名函数后面添加   use(args)
        函数的创建与调用方法
            1.按名字调用
            2.使用内置函数create_function()来创建
                eg:
                    $fn=create_function('arg1,'arg2','return arg1+arg2);
                    调用的时候直接调用
            3.创建匿名函数
            4.立即执行函数-------类似于JavaScript中的立即执行函数
                (function(){
                    //函数体
                })(args);






















